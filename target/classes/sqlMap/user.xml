<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对sql进行分类化管理
注意：使用mapper代理方法开发，namespace有特殊重要作用
-->
<mapper namespace="test">
    <!--在映射文件中配置很多sql语句-->
    <!--需求：通过id查询用户表的记录-->
    <!--通过select执行数据库查询
    id：标识映射文件中的sql，将sql语句封装到mappedstatement，
    所以将id称为statement的id
    #{}表示一个占位符，parameterType指定输入参数的类型
    #{id}：其中id表示接收输入的参数，名称叫id，如果输入参数是简单类型，#{}中参数名可以任意
    resultType:指定sql输出结果所映射的java对象类型
    -->

    <select id="findUserById" parameterType="int" resultType="com.eurasia.pojo.User">
        SELECT * FROM USER WHERE id = #{id};
    </select>

    <!--根据名称模糊查询用户信息，可能返回多条
    resultType指定单条记录映射的java对象类型
    '${}'：表示拼接sql串，将接收到的参数内容不加任何修饰拼接在sql中
    使用${}易引起sql注入
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.eurasia.pojo.User">
        SELECT * FROM USER WHERE username LIKE '%${value}%';
    </select>

    <!--添加用户
    parameterType：指定输入参数类型时pojo
    #{}中指定pojo的属性名，接收到pojo对象的属性值，Mybatis通过ognl获取对象的属性值
    -->
    <insert id="insertUser" parameterType="com.eurasia.pojo.User">
        /*
        *将插入数据的主键返回到User对象中
        *SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用于自增主键值
        *keyProperty：将查询到的主键值设置到parameterType指定对象的那个属性
        *order： SELECT LAST_INSERT_ID()执行顺序相当于insert语句来说，在insert后才能拿到主键值
        */
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user(username,birthday,sex,address) VALUE(#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM USER WHERE id=#{id};
    </delete>

    <!--更新用户-->
    <update id="updateUser" parameterType="com.eurasia.pojo.User">
        UPDATE USER SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} WHERE id=#{id}
    </update>
</mapper>